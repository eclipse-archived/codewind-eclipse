<!--
    Copyright (c) 2018 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v2.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v20.html

    Contributors:
        IBM Corporation - initial API and implementation
-->

<project name="cw_imports">

    <dirname property="cw_imports.basedir" file="${ant.file.cw_imports}" />

    <import file="${cw_imports.basedir}/public_imports/internal_imports/buildtasks.xml" />
    <import file="${cw_imports.basedir}/public_imports/updatesite_imports.xml"/>
    <import file="cw_suppliers_updatesite.xml"/>

   <target name="setCWUpdateSiteProperties">

         <echo>Open CW setCWUpdateSiteProperties call</echo>

         <condition property="java.executable" value="java" else="java.exe">
           <not>
             <os family="windows" />
           </not>
         </condition>

         <property name="local.workspace" location="${cw_imports.basedir}/.."/>
         <property name="target.jvm" location="${java.home}/bin/${java.executable}" />
         <property name="equinox.launcher" value="org.eclipse.equinox.app_1.3.100.v20120522-1841.jar" />
         <property name="delegate.build.dir" location = "${local.workspace}"/>

         <property name="nativeDirectory" value="${local.workspace}/tools.image/update" />
         <property name="sourceDir" value="${nativeDirectory}/staging" />
         <property name="tempDir" value="${sourceDir}/temp" />
         <property name="updateSiteDir" value="${sourceDir}/update-site" />
         <property name="updateSiteDirFull" value="${sourceDir}/update-sitefull" />
         <property name="version" value="${level_tag}" />
         <property name="fileNameVersion" value="${level_tag}" />

         <loadresource property="newVersion">
             <propertyresource name="fileNameVersion" />
             <filterchain>
                 <tokenfilter>
                     <filetokenizer />
                     <replacestring from=" " to="_" />
                 </tokenfilter>
             </filterchain>
         </loadresource>

         <var name="fileNameVersion" unset="true" />
         <property name="fileName" value="codewind" />
         <property name="fileNameVersion" value="${newVersion}" />
         <property name="qualifier" value="${buildLabel}"/>
         <property name="updatesite-name" value="${fileName}-${fileNameVersion}.v${qualifier}" />
         <property name="metadata-updatesite-name" value="${fileName}-metadata-${fileNameVersion}.v${qualifier}" />
         <property name="gen.updatesite.file" location="${cw_imports.basedir}/resources/cw_updatesite-properties/generateP2Metadata.xml" />
         <property name="target.updatesite.repository" location="${updateSiteDir}/repository" />

         <mkdir dir="${target.updatesite.repository}"/>

         <property name="cw.product.toplevelfeatures.list"
             location="cw_product_updatesite_toplevel_features.properties" />
         <property name="cw.product.features.list"
             location="cw_product_updatesite_features.properties" />

    </target>

    <target name="generateCWUpdateSite" depends="setCWUpdateSiteProperties">

        <echo>Call generateCWUpdateSite...</echo>

        <!-- Step 1 -->
        <!-- Create site.xml with top level feature(s) -->
        <generateUpdateSite
            tempDir="${tempDir}"
            sourceDir="${sourceDir}"
            outputDir="${updateSiteDir}"
            addIncludedFeatures="false">

            <!-- Add Main feature here -->
            <category name="Codewind"
                label="Codewind"
                description="Tools for working with Codewind applications in Eclipse">

                <!-- Features list file -->
                <featuresFile id="Open CW product updatesite toplevel features"
                    file="${cw.product.toplevelfeatures.list}" />

              </category>
        </generateUpdateSite>

        <!-- Step 2 -->
        <!-- Include features -->
        <generateUpdateSite
            tempDir="${tempDir}"
            sourceDir="${sourceDir}"
            outputDir="${updateSiteDirFull}"
            addIncludedFeatures="true">

            <!-- Features list file -->
            <featuresFile id="Open CW product updatesite features"
                                file="${cw.product.features.list}" />

          </generateUpdateSite>

          <!-- Step 3 -->
          <!-- Generate P2 metadata -->
          <copy todir="${updateSiteDir}/features" overwrite="true" verbose="true">
              <fileset dir="${updateSiteDirFull}/features">
                  <include name="**/*.jar"/>
              </fileset>
          </copy>

          <copy todir="${updateSiteDir}/plugins" overwrite="true" verbose="true">
              <fileset dir="${updateSiteDirFull}/plugins">
                  <include name="**/*.jar"/>
              </fileset>
          </copy>

        <ant antfile="${delegate.build.dir}/ant_build/public_imports/updatesite_imports.xml"
                             target="pde-setup"
                             inheritall="true"
                             inheritrefs="true"/>

        <ant antfile="${delegate.build.dir}/ant_build/public_imports/updatesite_imports.xml"
                                     target="generateP2Metadata"
                                     inheritall="true"
                                     inheritrefs="true"/>

          <!-- Step 4 -->
        <!-- Copy site.xml into staging directory for WTP installation compatibility-->
        <copy file="${updateSiteDir}/site.xml" todir="${target.updatesite.repository}" overwrite="true" verbose="true" />

        <property name="artifact.location" value="${nativeDirectory}/${updatesite-name}.zip"/>

          <!-- Step 5 -->
        <!-- Create final zip -->
        <zip destfile="${artifact.location}" basedir="${target.updatesite.repository}"/>

        <copy file="${artifact.location}" todir="${artifacts.dir}"/>

        <echo>***** Build artifact available at ${artifacts.dir}/${updatesite-name}.zip</echo>

    </target>

   <target name="generateCWSuppliersUpdateSite" depends="setCWUpdateSiteProperties">

        <echo>Call generateCWSuppliersUpdateSite...</echo>
        <antcall target="generateSuppliersUpdateSite"/>

   		<antcall target="eclipse.sign.jars"/>
    </target>
	
	<target name="eclipse.sign.jars">

        <echo>Call eclipse.sign.jars ...</echo>
		<for param="plugin.path">
			<fileset dir="${local.workspace}/tools.image/update/plugins" casesensitive="yes">
		    	<include name="**/*.jar"/>
		    </fileset>
			<sequential>
				<propertyregex override="true" property="plugin.file" input="@{plugin.path}" regexp="([^/]+)$"  select="\1"/>
				<echo message="Signing plugin : ${plugin.file}"/>
				<exec dir="${local.workspace}/tools.image/update/plugins" executable="curl">
		    		<arg value="--output"/>
		    	    <arg value="${plugin.file}"/>
		    	    <arg value="--form"/>
		    	    <arg value="file=@${plugin.file}"/>
		    	    <arg value="--silent"/>
		    	    <arg value="--show-error"/>
		    	    <arg value="--fail"/>
		    	    <arg value="http://build.eclipse.org:31338/sign"/>
			   	</exec>
			</sequential>
		</for>
	
    	<for param="feature.path">
			<fileset dir="${local.workspace}/tools.image/update/features" casesensitive="yes">
		    	<include name="**/*.jar"/>
		    </fileset>
			<sequential>
				<propertyregex override="true" property="feature.file" input="@{feature.path}" regexp="([^/]+)$"  select="\1"/>
				<echo message="Signing feature : ${feature.file}"/>
				<exec dir="${local.workspace}/tools.image/update/features" executable="curl">
		    		<arg value="--output"/>
		    	    <arg value="${feature.file}"/>
		    	    <arg value="--form"/>
		    	    <arg value="file=@${feature.file}"/>
		    	    <arg value="--silent"/>
		    	    <arg value="--show-error"/>
		    	    <arg value="--fail"/>
		    	    <arg value="http://build.eclipse.org:31338/sign"/>
			   	</exec>
			</sequential>
		</for>

	</target>
	
    <target name="generateCWSuppliersUpdateSiteRestore" depends="setCWUpdateSiteProperties">

            <echo>Call generateCWSuppliersUpdateSiteRestore...</echo>
		
			<mkdir dir="${local.workspace}/tools.image/update/features"/>
		    <mkdir dir="${sourceDir}/features"/>

            <copy todir="${sourceDir}/features" overwrite="true" verbose="true">
                <fileset dir="${local.workspace}/tools.image/update/features">
                    <include name="**/*.jar"/>
                </fileset>
            </copy>

            <copy todir="${sourceDir}/plugins" overwrite="true" verbose="true">
                <fileset dir="${local.workspace}/tools.image/update/plugins">
                    <include name="**/*.jar"/>
                </fileset>
            </copy>

    </target>
</project>
