/*******************************************************************************
 * Copyright (c) 2018, 2019 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

buildscript {
    repositories {
        mavenCentral()
    }
}

// Declare ant deps and classpath separately
repositories {
    mavenCentral()
}
configurations {
    antcp
    antScp
    corelibs
	fwlibs
}
dependencies {
    antcp 'org.apache.ivy:ivy:2.4.0'
    antcp 'ant-contrib:ant-contrib:1.0b3'
    antcp 'org.osgi:org.osgi.core:4.3.0'
    antcp 'asm:asm-all:3.3.1'
    antcp 'org.apache.aries:org.apache.aries.util:1.1.3'

    antScp 'org.apache.ant:ant-jsch:1.7.1', 'jsch:jsch:0.1.29'

    corelibs "io.socket:engine.io-client:1.0.0"
    corelibs "com.squareup.okhttp3:okhttp:3.8.1"
    corelibs "com.squareup.okio:okio:1.13.0"
    corelibs "io.socket:socket.io-client:1.0.0"

    // corelibs "com.nimbusds:oauth2-oidc-sdk:6.5"

    fwlibs "com.squareup.okhttp3:okhttp:3.8.1"
    fwlibs "com.squareup.okio:okio:1.13.0"

}

defaultTasks 'clean', 'getCoreDependencies', 'getFWCoreDependencies', 'compile', 'generateOpenCWUpdateSite'

task importAnt {
    ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
    configurations.antcp.each {
            File f ->
        antClassLoader.addURL(f.toURI().toURL())
    }

    // The below taskdefs are only used in prereqs.xml. build-cw.xml has its taskdefs loaded in the ant code.
    ant.taskdef(resource:'net/sf/antcontrib/antlib.xml',classpath:configurations.antcp.asPath)
    ant.taskdef(uri:'antlib:org.apache.ivy.ant', resource:'org/apache/ivy/ant/antlib.xml',classpath: configurations.antcp.asPath)
    // prereqs uses ivy to resolve and download our runtime dependencies and some open source libs
    // and move them into /lib/ folders of dependant plugins
    ant.importBuild('ant_build/prereqs/prereqs.xml')
    // build-cw provides the generateOpenCWUpdateSite target, which is the entry point
    // for the compilation and assembling of updatesites
    ant.importBuild('ant_build/build-cw.xml')
    println "Imported ant code"
}


def projDir = projectDir.getAbsolutePath()
def antBuildFolderPath = projDir + project.properties['ant.build.folder']
def targetPlatformFolder = file(projDir + project.properties['target.platform.folder'])

// file to download the eclipse target platform archive into
def eclipseTargetPlatformArchive = file(projDir + project.properties['eclipse.target.platform.archive.location'])
// folder to extract the eclipse target platform archive into
def eclipseTargetPlatformIESFolder  = file(projDir + project.properties['eclipse.target.platform.ies.folder'])
def eclipseTargetPlatformFolder  = file(projDir + project.properties['eclipse.target.platform.folder'])

def eclipseTempFolder  = file(projDir + project.properties['eclipse.temp.folder'])
def toolsImageFolder  = file(projDir + project.properties['tools.image.folder'])
def toolsImagePluginsFolder  = file(projDir + project.properties['tools.image.plugins.folder'])
def artifactsFolder = file(projDir + '/' + project.properties['ant.artifacts.folder'])

def corelibFolder = file(projDir + project.properties['codewind.core.prereqlib.folder'])

def fwcorelibFolder = file(projDir + project.properties['codewind.fw.core.prereqlib.folder'])

def excludeJson = "json-20090211.jar"
def jsonFile = file(projDir + project.properties['codewind.core.prereqlib.folder'] + '/org.json_1.0.0.v201011060100.jar')
def fwjsonFile = file(projDir + project.properties['codewind.fw.core.prereqlib.folder'] + '/org.json_1.0.0.v201011060100.jar')

// Download dependent plugins from maven repository for 'org.eclipse.codewind.core'
task getCoreDependencies(type: Copy) {

    if (!corelibFolder.exists()) {
        corelibFolder.mkdir()
    }
    println("Copying core dependencies into ${corelibFolder}")

    eachFile { println "Copying ${it.file.name}" }

    from configurations.corelibs {
	    exclude excludeJson
    }
    into corelibFolder
}

task getFWCoreDependencies(type: Copy) {

    if (!fwcorelibFolder.exists()) {
        fwcorelibFolder.mkdir()
    }
    println("Copying fw core dependencies into ${fwcorelibFolder}")

    eachFile { println "Copying ${it.file.name}" }

    from configurations.fwlibs {
	    exclude excludeJson
    }
    into fwcorelibFolder
}

task downloadJson(type: Download) {
    println("Downloading json jar")
    sourceUrl = 'http://download.eclipse.org/tools/orbit/downloads/drops/R20181102183712/repository/plugins/org.json_1.0.0.v201011060100.jar'
    target = jsonFile
}

task downloadFWJson(type: Download) {
    println("Downloading FW json jar")
    sourceUrl = 'http://download.eclipse.org/tools/orbit/downloads/drops/R20181102183712/repository/plugins/org.json_1.0.0.v201011060100.jar'
    target = fwjsonFile
}

class Download extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

// Download an Eclipse TargetPlatform
task downloadEclipseTargetPlatform {
    doLast {
        def eclipseTargetPlatformURL = new URL(project.properties['eclipse.target.platform.url'])

        if(!eclipseTargetPlatformIESFolder.exists() || eclipseTargetPlatformIESFolder.listFiles().length == 0) {
            eclipseTargetPlatformIESFolder.mkdirs()

            if (!eclipseTempFolder.exists())
                eclipseTempFolder.mkdirs()

            if (!eclipseTargetPlatformArchive.exists()) {
                println 'Downloading Eclipse Target Platform into ' + eclipseTargetPlatformArchive.getAbsolutePath()

                eclipseTargetPlatformURL.withInputStream{ i -> eclipseTargetPlatformArchive.withOutputStream{ it << i }}

                println 'Finished downloading Eclipse Target Platform'
                println 'Untar into ' + eclipseTargetPlatformIESFolder
            }
            else {
                println 'Untar existing ' + eclipseTargetPlatformArchive.getAbsolutePath() + ' into ' + eclipseTargetPlatformIESFolder
                println 'Run \'gradle cleanEclipse build\' to download Eclipse target platform files again'
            }

            copy {
                from tarTree(eclipseTargetPlatformArchive)
                into eclipseTargetPlatformIESFolder
            }
        }
        else {
            println eclipseTargetPlatformIESFolder.getAbsolutePath() + ' already exists.'
        }
    }

    onlyIf {
        System.env['skip_compile_cw'] == null
    }
}

// file to download the sdk archive into
def eclipseSdkArchive = file(projDir + project.properties['eclipse.sdk.archive.location'])
// folder to extract the sdk archive into
def eclipseSdkFolder  = file(projDir + project.properties['eclipse.sdk.folder'])

// Download an Eclipse sdk archive. This provides APIs used to assemble the updatesites.
task downloadEclipseSDK {
    doLast {
        def eclipseSdkArchiveURL = new URL(project.properties['eclipse.sdk.url'])

        if(!eclipseSdkFolder.exists() || eclipseSdkFolder.listFiles().length == 0) {
            eclipseSdkFolder.mkdir()

             if (!eclipseSdkArchive.exists()) {
                 println 'Downloading Eclipse SDK into ' + eclipseSdkArchive.getAbsolutePath()

                 eclipseSdkArchiveURL.withInputStream{ i -> eclipseSdkArchive.withOutputStream{ it << i }}

                 println 'Finished downloading Eclipse SDK'

                 println 'Untar into ' + eclipseSdkFolder
             }
             else {
                  println 'Untar existing ' + eclipseSdkArchive.getAbsolutePath() + ' into ' + eclipseSdkFolder
                  println 'Run \'gradle cleanEclipse build\' to download Eclipse SDK files again'
             }

            copy {
                from tarTree(eclipseSdkArchive)
                into eclipseSdkFolder
            }
        }
        else {
            println eclipseSdkFolder.getAbsolutePath() + ' already exists.'
        }
    }

    onlyIf {
        System.env['skip_compile_cw'] == null
    }
}

task build {
    doLast {
    }
}

task gradleGenerateCWUpdateSite {
    doLast {
    }
}

gradleGenerateCWUpdateSite.dependsOn generateOpenCWUpdateSite

build.dependsOn compile
build.dependsOn generateOpenCWUpdateSite

preparePrereqsIvy.dependsOn importAnt
compile.dependsOn preparePrereqsIvy
compile.dependsOn downloadEclipseSDK
compile.dependsOn downloadEclipseTargetPlatform

//// build version from the artifacts to avoid version mismatch
import static groovy.io.FileType.FILES

def getBuildLabelFromArtifact() {
    def filePrefix = System.getenv("FILE_PREFIX")
    def buildLabel = ""

    def files = ant.path {
            fileset(dir: 'ant_build/artifacts/', includes: "${filePrefix}*.zip")
    }

    files.list().each { file ->

        File aFile = new File(file)
        String fileName = aFile.getName()

        buildLabel = (fileName =~ "${filePrefix}(.*).zip")[0][1]

        if (buildLabel.isEmpty()) {
            buildLabel = ant.properties['buildLabel']
            println "Unable to grab build label - ant buildLabel is used instead."
        }
    }
    return buildLabel
}

import groovy.json.*

//// This method generates '${infoJson}' file in each build
def createJSONForBuild(version) {
        def infoJson = System.getenv("INFO_JSON")
        def filePrefix = System.getenv("FILE_PREFIX")
        def buildLog = System.getenv("BUILD_LOG")

        println "Creating ${infoJson} for ${version}."

        // Create JSON descriptor
        File infoJsonFile = new File("${rootDir}/${version}/${infoJson}")
        infoJsonFile.createNewFile()

        infoJsonFile.text = JsonOutput.prettyPrint(JsonOutput.toJson([
                                            build_log: "${buildLog}",
                                            driver_location: "${filePrefix}${version}.zip"
                                            ]))
}

// deploy build to Artifactory
task deployArtifactory {

    doLast {
    }

    onlyIf {
        ((System.getenv("cw_build_type") == "nightly") ||
             (System.getenv("cw_build_type") == "release"))
    }
}

// deploy build to DHE
task deployDHE {

    doLast {

        def version = getBuildLabelFromArtifact()
        def buildType = System.getenv("cw_build_type")
        def buildLog = System.getenv("BUILD_LOG")

        println "Publishing ${buildType} build: ${version}"

        def infoJson = System.getenv("INFO_JSON")

        def toPublishDir = "${rootDir}/${version}"
        mkdir(toPublishDir)

        if (buildType == "release") {
               createJSONForBuild("${version}")
        }

        // Put all files to be published into a directory
        def toPublish = ant.path {
             fileset(dir: 'ant_build/artifacts/', includes: "codewind-*.zip")
        }

        toPublish.list().each { file ->
            println "Publishing " + file + " to DHE"
            copy {
                from file
                into toPublishDir
            }
        }


        def workingDir = ant.path {
             fileset(dir: '${user.dir}', includes: "**")
        }

        def user = System.getenv("intranet.user")
        def host = System.getenv("dhe_server")
        def pw = System.getenv("intranet.password")

        if(user == null || user.isEmpty()) {
            throw new GradleException("dhe user id is not set!")
        }
        if(pw == null || pw.isEmpty()) {
            throw new GradleException("dhe password is not set!")
        }
        if(host == null || host.isEmpty()) {
            throw new GradleException("dhe_server is not set!")
        }

        def userAtHost = user + "@" + host
        def dir = "/www/stage/export/pub/software/microclimate/eclipse-tools"
        def destDHEStaging = userAtHost + ':' + dir

        println "Publishing build: ${version}"

        ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.antScp.asPath)

        ant.scp(todir: "${destDHEStaging}/${buildType}/",
                password: "${pw}",
                trust: "yes",
                sftp: "true",
                failOnError: "true",
                verbose: "true") {
                    fileset(dir: "${rootDir}", includes: "${version}/*")
                }

        file(toPublishDir).deleteDir()

        if (buildType != "nightly") {

            //// Update '${buildType}/${infoJson}' with the newly published build
            ant.touch(file: "${rootDir}/${infoJson}")

            // Download ${infoJson} from destDHEStaging and use it if it's not emptied.
            println "Downloading ${destDHEStaging}/${buildType}/${infoJson}..."

            ant.scp(file: "${destDHEStaging}/${buildType}/${infoJson}",
                    todir: "${rootDir}",
                    password: "${pw}",
                    trust: "yes",
                    sftp: "true",
                    failOnError: "false",
                    verbose: "true")

            File json = new File("${rootDir}/${infoJson}")

            def object = [:]

            // if ${infoJson} from the staging server is not empty
            if (json.getText() != null && json.getText() != "") {
                object = new JsonSlurper().parseText(json.getText())
            } else {
                  def infoJsonDHEPublicUrl = "http://public.dhe.ibm.com/ibmdl/export/pub/software/microclimate/eclipse-tools/${buildType}/${infoJson}"

                  // if ${infoJson} in staging server is empty then download ${infoJson} from DHEPublic
                  println "${destDHEStaging}/${buildType}/${infoJson} is already published."
                  println "Downloading ${infoJsonDHEPublicUrl}"

                  URL infoJsonURL = new URL("${infoJsonDHEPublicUrl}")
                  def connection = infoJsonURL.openConnection()

                  // if ${infoJson} is not downloadable
                   if ("${connection.responseCode}" == "404") {
                      println "Response Code/Message: ${connection.responseCode} / ${connection.responseMessage}"
                  } else {
                      json << infoJsonURL.openStream()
                    object = new JsonSlurper().parseText(json.getText())
                  }
            }

            List versionsList = object['versions']
            if (versionsList != null) {
                versionsList.add("${version}")
            } else {
                versionsList = ["${version}"]
            }

            object['versions'] = versionsList
            json.text = JsonOutput.prettyPrint(JsonOutput.toJson(object))

            println "Publishing build list ${infoJson}"
            ant.scp(file: "${rootDir}/${infoJson}",
                    todir: "${destDHEStaging}/${buildType}/${infoJson}",
                    password: "${pw}",
                    trust: "yes",
                    sftp: "true",
                    failOnError: "true",
                    verbose: "true")
            file("${rootDir}/${infoJson}").delete()
        }

    }

    onlyIf {
        ((System.getenv("cw_build_type") == "nightly") ||
             (System.getenv("cw_build_type") == "release"))
    }
}

task cleanEclipse(type: Delete) {
    doLast {
        println 'Delete ' + eclipseSdkFolder
        file(eclipseSdkFolder).deleteDir()
        println 'Delete ' + eclipseTargetPlatformFolder
        file(eclipseTargetPlatformFolder).deleteDir()
    }
}

// Delete all prereq files and extracted SDK and target platform files.
task cleanPrereqs(type: Delete) {
    doLast {
        // for each plugin, delete lib/ folder so that ivy will re-retrieve prereqs
        fileTree(dir: projDir, include: 'com.ibm.*/lib/').visit {  FileVisitDetails details ->
            if(details.file.isDirectory() && 'lib'.equals(details.file.name)) {
                println 'Delete ' + details.file.getPath()
                details.file.deleteDir()
            }
        }
    }

    onlyIf {
        System.env['skip_compile_cw'] == null
    }
}

// clean build output folder
task cleanBuilds(type: Delete) {
    doLast {
        def artifactsDir = project.properties['ant.artifacts.folder']
        println 'Delete ' + artifactsDir
        file(artifactsDir).deleteDir()

        println 'Delete ' + toolsImageFolder
        file(toolsImageFolder).deleteDir()
    }

    onlyIf {
        System.env['skip_compile_cw'] == null
    }
}

// Delete all prereq files, downloaded artifacts and build output
task clean(type: Delete) {
    doLast {
    }

    onlyIf {
        System.env['skip_compile_cw'] == null
    }
}

clean.dependsOn cleanBuilds, cleanPrereqs
getCoreDependencies.finalizedBy downloadJson
getFWCoreDependencies.finalizedBy downloadFWJson
